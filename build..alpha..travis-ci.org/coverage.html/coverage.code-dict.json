{"/home/travis/build/npmtest/node-npmtest-tinder/test.js":"/* istanbul instrument in package npmtest_tinder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tinder/lib.npmtest_tinder.js":"/* istanbul instrument in package npmtest_tinder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tinder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tinder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tinder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tinder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tinder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tinder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tinder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tinder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tinder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tinder.__dirname + '/lib.npmtest_tinder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tinder/node_modules/tinder/tinder.js":"var TINDER_HOST = \"https://api.gotinder.com/\"\nvar TINDER_IMAGE_HOST = \"https://imageupload.gotinder.com/\"\n\nvar request = require('superagent');\n\n/**\n * Constructs a new instance of the TinderClient class\n *\n * @constructor\n * @this {TinderClient}\n */\nfunction TinderClient() {\n  var xAuthToken = null;\n  this.lastActivity = new Date();\n  var _this = this;\n\n  /**\n   * The current account's user id\n   */\n  this.userId = null;\n\n  /**\n   * Helper for getting the request headers\n   */\n  var getRequestHeaders = function() {\n    var headers = {\n        'User-Agent'      : 'Tinder Android Version 4.5.5',\n        'os_version'      : '23',\n        'platform'        : 'android',\n        'app-version'     : '854',\n        'Accept-Language' : 'en'\n    };\n\n    if (xAuthToken) {\n        headers['X-Auth-Token'] = xAuthToken;\n    }\n\n    return headers;\n  };\n\n  /**\n   * Issues a GET request to the Tinder API\n   * @param {String} path the relative path\n   * @param {Object} data an object containing extra values \n   * @param {Function} callback the callback to invoke when the request completes \n   */\n  var tinderGet = function(path, data, callback) {\n    request.get(TINDER_HOST + path)\n      .set(getRequestHeaders())\n      .end(callback)\n  };\n\n  /**\n   * Issues a POST request to the Tinder API\n   * @param {String} path the relative path\n   * @param {Object} data an object containing extra values\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  var tinderPost = function(path, data, callback) {\n    request.post(TINDER_HOST + path)\n      .set(getRequestHeaders())\n      .send(data)\n      .end(callback)\n  };\n\n  /**\n   * Issues a PUT request to the Tinder API\n   * @param {String} path the relative path\n   * @param {Object} data an object containing extra values\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  var tinderPut = function(path, data, callback) {\n    request.put(TINDER_HOST + path)\n      .set(getRequestHeaders())\n      .send(data)\n      .end(callback)\n  };\n\n  /**\n   * Issues a DELETE request to the Tinder API\n   * @param {String} path the relative path\n   * @param {Object} data an object containing extra values\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  var tinderDelete = function(path, data, callback) {\n    request.del(TINDER_HOST + path)\n      .set(getRequestHeaders())\n      .send(data)\n      .end(callback)\n  };\n\n  /**\n   * Helper for transforming the request callback values\n   * @param {Function} callback the callback\n   */\n  var makeTinderCallback = function(callback) {\n    return function(error, res) {\n      var data = null;\n\n      if (!error) {\n        if (typeof res.body === \"string\")\n        {\n          try\n          {\n            data = JSON.parse(res.body);\n          } catch (err) {\n            error = data;\n          }\n        }\n        else if (typeof res.body === \"object\") {\n          data = res.body;\n        }\n      }\n\n      if (data && data.status && data.status !== 200) {\n        error = data;\n      }\n\n      if (callback) {\n        callback(error, data);\n      }\n    };\n  };\n\n  /**\n   * Authorize this tinder client\n   * @param {String} fbToken the Facebook token. This will be obtained when authenticating the user\n   * @param {String} fbId the Facebook user id.\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.authorize = function(fbToken, fbId, callback) {\n    tinderPost('auth',\n      {\n        facebook_token: fbToken,\n        facebook_id: fbId,\n        locale: 'en'\n      },\n      function(error, res) {\n        // If no body is passed back, return an error\n        if(res.body === undefined){\n          error = new Error('No token passed back from Tinder')\n        }\n\n        var body = res.body || { 'token': null };\n        if (!error && body.token) {\n          xAuthToken = body.token;\n          _this.userId = body.user._id;\n          _this.defaults = body;\n\n          callback = makeTinderCallback(callback);\n          callback(error, res);\n        } else if (body.error){\n          error = \"Failed to authenticate: \" + body.error\n          callback(error, res);\n        } else {\n          callback(error, res);\n        }\n      });\n  };\n\n  /**\n   * Set auth token if you have it saved, no need to do fb login every time\n   */\n  this.setAuthToken = function(token) {\n    xAuthToken = token;\n  };\n\n  this.getAuthToken = function() {\n    return xAuthToken;\n  };\n\n  /**\n   * Returns whether this client is authorized\n   * @return whether or not this client is authorized\n   */\n  this.isAuthorized = function() {\n    return xAuthToken != null;\n  }\n\n  /**\n   * Returns the xAuthToken\n   * @return xAuthToken\n   */\n  this.getAuthToken = function() {\n    return xAuthToken || null;\n  }\n\n  /**\n   * Returns client information and globals\n   * Globals are used for interacting with tinder api limits\n   */\n  this.getDefaults = function() {\n    return _this.defaults;\n  }\n  \n  /**\n   * Gets a list of nearby users\n   * @param {Number} limit the maximum number of profiles to fetch\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getRecommendations = function(limit, callback) {\n    tinderGet('user/recs', \n      {\n        limit: limit\n      },\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Sends a message to a user\n   * @param {String} matchId the id of the match\n   * @param {String} message the message to send\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.sendMessage = function(matchId, message, callback) {\n    tinderPost('user/matches/' + matchId,\n      {\n        message: message\n      },\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Likes (swipes right) on a user\n   * @param {String} userId the id of the user\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.like = function(userId, callback) {\n    tinderGet('like/' + userId,\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Superlikes a user\n   * @param {String} userId the id of the user\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.superLike = function(userId, callback) {\n    tinderPost('like/' + userId + '/super',\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Passes (swipes left) on a user\n   * @param {String} userId the id of the user\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.pass = function(userId, callback) {\n    tinderGet('pass/' + userId,\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Unmatch with a user\n   * @param {String} matchID the id of the match\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.unmatch = function(matchId, callback) {\n    tinderDelete('user/matches/' + matchId,\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Gets a list of new updates. This will be things like new messages, users who liked you, etc. \n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getUpdates = function(callback) {\n    tinderPost('updates',\n      {\n        last_activity_date: _this.lastActivity.toISOString()\n      },\n      makeTinderCallback(function(err, data){\n        if (data && data.last_activity_date) {\n          _this.lastActivity = new Date(data.last_activity_date);\n        }\n\n        if (callback) {\n          callback(err, data);\n        }\n      }));\n  };\n\n  /**\n   * Gets the entire history for the current account (all matches, messages, blocks, etc.)\n   * \n   * NOTE: Old messages seem to not be returned after a certain threshold. Not yet\n   * sure what exactly that timeout is. The official client seems to get this update\n   * once when the app is installed then cache the results and only rely on the\n   * incremental updates\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getHistory = function(callback) {\n    tinderPost('updates',\n      {\n        last_activity_date: \"\"\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Updates the geographical position for the current account \n   * @param {Number} lon the longitude\n   * @param {Number} lat the latitutde\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updatePosition = function(lon, lat, callback) {\n    tinderPost('user/ping',\n      {\n        lon: lon,\n        lat: lat\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Gets the current account info\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getAccount = function(callback) {\n    tinderGet('meta',\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Update your gender\n   * @param {Number} gender is your gender (0 = Male, 1 = Female)\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updateGender = function(gender, callback) {\n    tinderPost('profile',\n      {\n        gender: gender\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Update your bio\n   * @param {String} bio is you bio (500 characters max.)\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updateBio = function(bio, callback) {\n    tinderPost('profile',\n      {\n        bio: bio\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Update your job\n   * @param {String} id is the facebook id of the job\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updateJob = function(id, callback) {\n    tinderPut('profile/job',\n      {\n        \"company\": {\n          id: id\n        }\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Delete your current job\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.deleteJob = function(callback) {\n    tinderDelete('profile/job',\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Update your school\n   * @param {String} id is the facebook id of the school\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updateSchool = function(id, callback) {\n    tinderPut('profile/school',\n      {\n        schools: [{\n          id: id\n        }]\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Delete your current school\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.deleteSchool = function(callback) {\n    tinderDelete('profile/school',\n      null,\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Updates the preferences for the current account\n   * @param {Boolean} discovery whether or not to show user's card\n   * @param {Number} ageMin the minimum age to show recommendations\n   * @param {Number} ageMax the maximum age to show recommendations\n   * @param {Number} gender the gender to show recommentations (0 = Male, 1 = Female, -1 = Both)\n   * @param {Number} distance the distance in miles to show recommendations\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updatePreferences = function(discovery, ageMin, ageMax, gender, distance, callback) {\n    tinderPost('profile',\n      {\n        discoverable: discovery,\n        age_filter_min: ageMin,\n        age_filter_max: ageMax,\n        gender_filter: gender,\n        distance_filter: distance\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Delete the current account\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.deleteAccount = function(callback) {\n    tinderDelete('profile',\n      null,\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Gets a user by id\n   * @param {String} userId the id of the user\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getUser = function(userId, callback){\n    tinderGet('user/' + userId,\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Upload a new picture to the current account\n   * @param {Buffer} file the picture that you want to upload\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.uploadPicture = function(file, callback) {\n    request.post(TINDER_IMAGE_HOST + 'image?client_photo_id=ProfilePhoto' + \n                 new Date().getTime())\n      .set(getRequestHeaders())\n      .field('userId', _this.userId)\n      .attach('file', file)\n      .end(makeTinderCallback(callback))\n  };\n\n  /**\n   * Post a new picture to the current account from Facebook\n   * @param {String} pictureId is the facebook id of the picture\n   * @param {Float} xdistance_percent is the zoom percentage in x 0 full Zoom 1 no Zoom\n   * @param {Float} ydistance_percent is the zoom percentage in x 0 full Zoom 1 no Zoom\n   * @param {Float} xoffset_percent is the offset from the left corner in percentage\n   * @param {Float} yoffset_percent is the offset from the top corner in percentage\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.uploadFBPicture = function(pictureId, xdistance_percent, ydistance_percent, xoffset_percent, yoffset_percent, callback) {\n    tinderPost('media',\n      {\n        transmit: \"fb\",\n        assets: [{\n          ydistance_percent: ydistance_percent,\n          id: id,\n          xoffset_percent: xoffset_percent,\n          yoffset_percent: yoffset_percent,\n          xdistance_percent: xdistance_percent\n        }]\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Delete a picture from the current account\n   * @param {String} pictureId the id of the picture\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.deletePicture = function(pictureId, callback) {\n    tinderDelete('media',\n      {\n        assets: [pictureId]\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Get a share URL for a user\n   * \n   * @param {String} userId the id of the user\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getShareLink = function(userId, callback) {\n    tinderPost('user/' + userId + '/share',\n      null,\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Report a user\n   * \n   * @param {String} userId the id of the user\n   * @param {Number} causeId one of 4 (inappropriate photos), 1 (spam), or 0 (other)\n   * @param {String} causeText optional reason for report when causeId is 0 (other)\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.report = function(userId, causeId, causeText, callback) {\n    var data = {\n      cause: causeId\n    }\n    if (causeId == 0 && causeText != null) data['text'] = causeText;\n    tinderPost('report/' + userId,\n      data,\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Create a web username for the current account\n   * \n   * @param {String} userName the username to request be created\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.createUsername = function(username, callback) {\n    tinderPost('profile/username',\n      {\n        username: username\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Change a web username for the current account if it's already been set\n   * \n   * @param {String} userName the username to request be created\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.changeUsername = function(username, callback) {\n    tinderPut('profile/username',\n      {\n        username: username\n      },\n      makeTinderCallback(callback));\n  };\n\n  /**\n   * Deletes the existing web username for the current account\n   * \n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.deleteUsername = function(callback) {\n    tinderDelete('profile/username',\n      null,\n      makeTinderCallback(callback));\n  };\n  \n  ///////////// TINDER PLUS /////////////////\n  \n  /**\n   * Update the passport location \n   * @param {Number} lon the longitude\n   * @param {Number} lat the latitutde\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.updatePassport = function(lat, lon, callback) {\n    tinderPost('/passport/user/travel',\n      {\n        lon: lon,\n        lat: lat\n      },\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * Reset the passport location \n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.resetPassport = function(callback) {\n    tinderPost('/passport/user/reset',\n      null,\n      makeTinderCallback(callback));\n  };\n  \n  /**\n   * @deprecated\n   * Get authenticated user info\n   * @param {Function} callback the callback to invoke when the request completes\n   */\n  this.getProfile = function(callback) {\n    console.log('This function is deprecated. Use getAccount(callback) instead.');\n    return this.getAccount(callback);\n  };  \n}\n\nexports.TinderClient = TinderClient;\n"}